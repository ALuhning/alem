const { generate_data_json } = require("./data.js");
const { create_dist, for_rfile, log } = require("./utils.js");
const {
  process_file,
  removeComments,
  removeBlankLines,
  mimify,
  applyEnvironment,
  parseOptions,
} = require("./parse.js");
const { read_bos_config } = require("./config");
const alemPkg = require("../package.json");
const path = require("path");
const fs = require("fs");
const {
  checkImportFeatures,
  checkFeaturesMarker,
  replaceMarkers,
} = require("./organize.js");

const distFolder = process.env.DIST_FOLDER || "build";

// Main function to orchestrate the build script
async function build() {
  create_dist(distFolder);
  process_dist();
  generate_data_json();
}

async function build_with_log() {
  let loading = log.loading("Building the project");
  await build().catch((err) => {
    loading.error();
    log.error(err);
    process.exit(1);
  });
  loading.finish();
  log.sucess("Build complete");
}

// walk through each app folder
function process_dist() {
  const config = read_bos_config();
  const finalFileName = config.isIndex
    ? "Index"
    : config.name.replaceAll(" ", "");

  // built in utils
  let fileBundleBody = process_file(path.join(__dirname, "tools", "utils.js"));

  // built in components
  fileBundleBody += process_file(
    path.join(__dirname, "tools", "components.jsx"),
  );

  // built in state manager
  fileBundleBody += process_file(
    path.join(__dirname, "tools", "stateManager.jsx"),
  );

  // built in route manager
  fileBundleBody += process_file(path.join(__dirname, "tools", "routes.jsx"));

  // built in hooks
  fileBundleBody += process_file(path.join(__dirname, "tools", "hooks.js"));

  // check if AlemSpinner should be used
  if (!config?.options?.showFallbackSpinner) {
    fileBundleBody = fileBundleBody.replace(
      "return <AlemSpinner />;",
      'return "";',
    );
  }

  // loop through all .css files inside the './src' and get their content
  fileBundleBody += "const alemCssBody = `";
  for_rfile(path.join(".", "src"), ["css", "sass"], (file) => {
    const fileBody = process_file(file);
    fileBundleBody += fileBody;
  });
  fileBundleBody += "`;";
  fileBundleBody += process_file(path.join(__dirname, "tools", "theme.jsx"));

  // loop through all files inside the './plugins' and get their content
  for_rfile(path.join(".", "plugins"), ["js", "jsx", "ts", "tsx"], (file) => {
    const fileBody = process_file(file);
    fileBundleBody += fileBody;
  });

  // loop through all files inside the './src' and get their content
  for_rfile(path.join(".", "src"), ["js", "jsx", "ts", "tsx"], (file) => {
    // Verifica se a instancia dos objetos importados já estão no bundle body
    // caso nao esteja, adicinar marcadores para inserir na posicao correta
    // mais tarde
    const pendingInstances = checkImportFeatures(file, fileBundleBody);
    // console.log("PENDING INSTANCES", pendingInstances);
    fileBundleBody += pendingInstances;

    const fileBody = process_file(file);

    // Verificar se já existe um marcador de espaço para as instancias
    // deste arquivo, se existir, deve colocar o conteúdo no espaço
    // do marcador criado para ele
    fileBundleBody = checkFeaturesMarker(fileBody, fileBundleBody);

    // fileBundleBody += fileBody;
  });

  fileBundleBody = replaceMarkers(fileBundleBody);

  // finish the file body with the app indexer
  fileBundleBody += process_file(
    path.join(__dirname, "tools", "appIndexer.jsx"),
  );

  // Remove comments
  fileBundleBody = removeComments(fileBundleBody);

  // Remove blank lines
  fileBundleBody = removeBlankLines(fileBundleBody);

  // Apply ports - works for development only
  // this won't affect production because the state of enviroment is going to be
  // production
  fileBundleBody = applyEnvironment(fileBundleBody);

  // Apply changes depending of the config.options
  fileBundleBody = parseOptions(fileBundleBody);

  // Mimify
  fileBundleBody = mimify(fileBundleBody);

  // Add Alem signature + repository info if available
  // TODO: abstract this in a separated file
  const projectPkg = JSON.parse(
    fs.readFileSync(path.join("package.json"), "utf-8"),
  );

  const projectRepositoryLink =
    projectPkg?.repository && typeof projectPkg?.repository === "string"
      ? projectPkg?.repository
      : projectPkg.repository?.url || "";

  fileBundleBody = `
  /** Bundle generated by Além Library v${alemPkg.version} - See more here: https://github.com/wpdas/alem */
  ${projectRepositoryLink ? `/** Project repository: ${projectRepositoryLink.replaceAll("git+", "").replaceAll(".git", "")} */` : ""}
  ${fileBundleBody}
  `;

  // Note: Save unified file
  // Note: must save inside a ./src folder. This is the only folder bos-clir-rs recognizes
  fs.writeFileSync(
    path.join(`./build/src/${finalFileName}.jsx`),
    fileBundleBody,
  );
}

module.exports = {
  build,
  process_dist,
  build_with_log,
};
