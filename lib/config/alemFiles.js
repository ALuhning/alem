const path = require("path");
const { process_file, removeComments } = require("../parse");
const { for_rfile } = require("../utils");
const { ALEM_VM_FOLDER } = require("../constants");
const importableAlemFileSchemas = require("./importableAlemFileSchemas");
const plugins = require("../../plugins");

const loadHeaderFilesContent = async () => {
  // State
  let bundleFileBody = process_file(
    path.join(__dirname, "../", ALEM_VM_FOLDER, "state.ts"),
  );

  // Remove comentÃ¡rios do state.ts processado
  bundleFileBody = removeComments(bundleFileBody);

  // Load .CSS files
  // Loop through all .css files inside the './src' and get their content
  bundleFileBody += "const alemCssBody = `";
  for_rfile(path.join(".", "src"), ["css", "sass"], (file) => {
    const fileBody = process_file(file);
    bundleFileBody += fileBody;
  });
  // CSS content generated by plugins
  const cssFromPlugins = await plugins.css();
  bundleFileBody += cssFromPlugins;

  // Closes the css content
  bundleFileBody += "`;";

  // Theme
  const alemThemeContent = process_file(
    path.join(__dirname, "../", ALEM_VM_FOLDER, "components", "AlemTheme.jsx"),
  );

  bundleFileBody += removeComments(alemThemeContent);

  return bundleFileBody;
};

/**
 * Criar o indexador do projeto
 * @returns
 */
const loadIndexerContent = () => {
  const appIndexer = process_file(
    path.join(__dirname, "../", ALEM_VM_FOLDER, "components", "AppIndexer.jsx"),
  );

  return removeComments(appIndexer);
};

module.exports = {
  importableAlemFileSchemas,
  loadHeaderFilesContent,
  loadIndexerContent,
};
